#!/usr/bin/env python

import roslib
roslib.load_manifest('trajectoryPublisher')

import numpy as np
import rospy
import os
import rospkg
import time
from geometry_msgs.msg import PoseStamped
from std_msgs import String

FORCE_TOPIC_NAME = '/ForceSensor'
POSE_TOPIC_NAME = 'KUKA/Pose'
STATUS_TOPIC_NAME = '/TaskStatus'
RECORDING_FREQ = 20

def formatLine(t,poseMsg,wrenchMsg):
    line = str(t)+' '
    line = line+str(poseMsg.pose.position.x)+' '
    line = line+str(poseMsg.pose.position.y)+' '
    line = line+str(poseMsg.pose.position.z)+' '
    
    line = line+str(poseMsg.pose.orientation.x)+' '
    line = line+str(poseMsg.pose.orientation.y)+' '
    line = line+str(poseMsg.pose.orientation.z)+' '
    line = line+str(poseMsg.pose.orientation.w)+' '

    line = line+str(wrenchMsg.wrench.force.x)+' '
    line = line+str(wrenchMsg.wrench.force.y)+' '
    line = line+str(wrenchMsg.wrench.force.z)+' '

    line = line+str(wrenchMsg.wrench.torque.x)+' '
    line = line+str(wrenchMsg.wrench.torque.y)+' '
    line = line+str(wrenchMsg.wrench.torque.z)
    return line


class trajectorySubscriber():
    def __init__(self):
        # initialize subscriber
        rospy.init_node('trajectorySubscriber')
        rospy.Subscriber(POSE_TOPIC_NAME,PoseStamped,self.newPoseCallback)
        rospy.Subscriber(FORCE_TOPIC_NAME,WrenchStamped,self.newWrenchCallback)
        rospy.Subscriber(STATUS_TOPIC_NAME,String,self.newStatusCallback)
        # folder for storing the received data
        # get path to trajectoryPublisher ros package
        p = rospkg.RosPack().get_path('trajectoryPublisher')
        self.p_store = p+'/recordings/'
        fs = os.listdir(o_store)
        recNb = len(fs)+1
        self.poselist = deque()
        self.wrenchdeque = deque()
        self.status = None
        
    def newPoseCallback(self,newPose):
        if(self.recording):
            self.posedeque.append(newPose)

    def newWrenchCallback(self,newWrench):
        if(self.recording):
            self.wrenchdeque.append(newWrench)

    def newStatusCallback(self,newStatus):
        self.status = newStatus

    def run(self):
        while True:
            if (not self.recording) and self.status=='EXECUTING':
                self.startRecording()

            if self.recording and self.status =='IDLE':
                self.stopRecording()
            time.sleep(0.1)
            
    def startRecording(self):
        self.recording = True

    def stopRecording(self):
        self.recording = False
        T = 1.0/RECORDING_FREQ
        poseMsg = self.posedeque.popleft()
        wrenchMsg = self.wrenchdeque.popleft()
        t = 0.0;
        line = formatLine(t,poseMsg,wrenchMsg)
        lines.append(line)
        while True:
            # keep track of time stamps of last written messages
            pose_ot = poseMsg.header.time
            wrench_ot = wrenchMsg.header.time
            # downsample and sync messages
            while True:
                # pop messages until the minimum time has elapsed between old and new message
                poseMsg = self.posedeque.popleft()
                if poseMsg.header.time-pose_ot>T or len(self.posedeque)<1:
                    break
            while True:
                # pop messages until the minimum time has elapsed between old and new message
                wrenchMsg = self.wrenchdeque.popleft()
                if wrenchMsg.header.time-wrench_ot>T or len(self.wrenchdeque)<1:
                    break
            # update time
            t = t+T
            # add a formatted line from the messages to the list of lines
            lines.append(formatLine(t,poseMsg,wrenchMsg))
            # if there are no more messages we are done
            if len(self.posedeque)<1 or len(self.wrenchdeque)<1:
                break
        # open a file for putting the recorded data
        f = open(self.p_store+'rec'+str(self.recNb),'w')
        # write it
        f.writelines(lines)
        f.close()
        self.posedeque.clear()
        self.wrenchdeque.clear()

if __name__=='__main__':
    ts = trajectorySubscriber()
    ts.run()
        
    

    




